#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import asyncio
import logging
from typing import Optional
import psycopg2
from telegram import Update, Bot, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes
import signal
import sys
import requests
import schedule
import time
import threading
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self, *args, **kwargs):
        self.logger = logging.getLogger(__name__)
        self.application: Optional[Application] = None
        self.bot: Optional[Bot] = None
        self.running = False
        
    def get_bot_token(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        return os.environ.get('TELEGRAM_BOT_TOKEN', '').strip()
    
    def get_database_url(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        return os.environ.get('DATABASE_URL', 'postgres://kanban_user:kanban_pass@localhost:5432/kanban_db')
        
    def get_db_connection(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            database_url = self.get_database_url()
            conn = psycopg2.connect(database_url)
            return conn
        except Exception as e:
            self.logger.error(f"üî¥ –ë–î: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user_id = update.effective_user.id
            username = update.effective_user.username
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–∏–≤—è–∑–∫–∏
            if context.args and len(context.args) > 0:
                link_token = context.args[0]
                self.logger.info(f"üîó –ö–û–ú–ê–ù–î–ê: /start —Å —Ç–æ–∫–µ–Ω–æ–º –ø—Ä–∏–≤—è–∑–∫–∏ –æ—Ç @{username} (ID: {user_id})")
                success = await self.process_link_token(user_id, username, link_token)
                if success:
                    await update.message.reply_text(
                        "‚úÖ **–ü—Ä–∏–≤—è–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!**\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n"
                        "‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á\n"
                        "‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö\n"
                        "‚Ä¢ –í–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –≤ –∫–æ–º–∞–Ω–¥–µ\n\n"
                        f"–í–∞—à Telegram ID: `{user_id}`",
                        parse_mode='Markdown'
                    )
                    return
                else:
                    await update.message.reply_text(
                        "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏**\n\n"
                        "–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ —Å–∞–π—Ç–µ.",
                        parse_mode='Markdown'
                    )
                    return
            
            # –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
            self.logger.info(f"üëã –ö–û–ú–ê–ù–î–ê: /start –æ—Ç @{username} (ID: {user_id})")
            await update.message.reply_text(
                f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–∏.\n"
                f"–í–∞—à Telegram ID: `{user_id}`\n\n"
                f"üîó **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**\n"
                f"1. –ó–∞–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–µ\n"
                f"2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram'\n"
                f"3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –Ω–∞–∂–º–∏—Ç–µ 'Start'\n\n"
                f"üìã **–ö–æ–º–∞–Ω–¥—ã:**\n"
                f"/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
                f"/myid - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à ID",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            self.logger.error(f"üî¥ –û–®–ò–ë–ö–ê: –ö–æ–º–∞–Ω–¥–∞ /start: {e}")
    
    async def process_link_token(self, telegram_user_id: int, telegram_username: str, link_token: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏–≤—è–∑–∫–∏"""
        try:
            conn = self.get_db_connection()
            if not conn:
                self.logger.error("üî¥ –ë–î: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞")
                return False
            
            cur = conn.cursor()
            
            # –ò—â–µ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
            cur.execute('''
                SELECT user_id FROM telegram_link_tokens 
                WHERE token=%s AND NOT used AND expires_at > NOW()
            ''', (link_token,))
            
            token_row = cur.fetchone()
            if not token_row:
                self.logger.warning(f"‚ö†Ô∏è –¢–û–ö–ï–ù: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω: {link_token}")
                cur.close()
                conn.close()
                return False
            
            user_id = token_row[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç Telegram ID –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            cur.execute('SELECT username FROM users WHERE telegram_id=%s AND id!=%s', (str(telegram_user_id), user_id))
            existing_user = cur.fetchone()
            if existing_user:
                self.logger.warning(f"‚ö†Ô∏è –ü–†–ò–í–Ø–ó–ö–ê: Telegram ID {telegram_user_id} —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {existing_user[0]}")
                cur.close()
                conn.close()
                return False
            
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram ID –∏ username –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            cur.execute('UPDATE users SET telegram_id=%s, telegram_username=%s WHERE id=%s', (str(telegram_user_id), telegram_username, user_id))
            
            # –û—Ç–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
            cur.execute('UPDATE telegram_link_tokens SET used=TRUE WHERE token=%s', (link_token,))
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            cur.execute('SELECT username FROM users WHERE id=%s', (user_id,))
            username_row = cur.fetchone()
            username = username_row[0] if username_row else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
            
            conn.commit()
            cur.close()
            conn.close()
            
            self.logger.info(f"‚úÖ –ü–†–ò–í–Ø–ó–ö–ê: –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} -> @{telegram_username} (ID: {telegram_user_id})")
            return True
            
        except Exception as e:
            self.logger.error(f"üî¥ –û–®–ò–ë–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏–≤—è–∑–∫–∏: {e}")
            if 'conn' in locals() and conn:
                try:
                    conn.rollback()
                    conn.close()
                except Exception:
                    pass
            return False
    
    async def myid_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = update.effective_user.id
            username = update.effective_user.username
            self.logger.info(f"üÜî –ö–û–ú–ê–ù–î–ê: /myid –æ—Ç @{username} (ID: {user_id})")
            await update.message.reply_text(
                f"–í–∞—à Telegram ID: `{user_id}`\n\n"
                f"üîó **–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:**\n"
                f"1. –ó–∞–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –∫–∞–Ω–±–∞–Ω-–¥–æ—Å–∫–µ\n"
                f"2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram'\n"
                f"3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –Ω–∞–∂–º–∏—Ç–µ 'Start'",
                parse_mode='Markdown'
            )
        except Exception as e:
            self.logger.error(f"üî¥ –û–®–ò–ë–ö–ê: –ö–æ–º–∞–Ω–¥–∞ /myid: {e}")
    
    def format_notification(self, notif_type, message, link=None, from_username=None, team_name=None, task_text=None):
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è Telegram –ø–æ —Ç–∏–ø—É"""
        if notif_type == 'assigned':
            # –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞
            text = (
                f"üìù *–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞!*\n"
                f"*–ó–∞–¥–∞—á–∞:* _{task_text}_\n"
                f"*–ö–æ–º–∞–Ω–¥–∞:* _{team_name}_"
            )
            if from_username:
                text += f"\n*–ù–∞–∑–Ω–∞—á–∏–ª:* @{from_username}"
            if link:
                text += f"\n\n[–û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É]({link})"
            return text
        elif notif_type == 'mention':
            # –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            text = (
                f"üí¨ *–í–∞—Å —É–ø–æ–º—è–Ω—É–ª–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏!*\n"
                f"*–ó–∞–¥–∞—á–∞:* _{task_text}_\n"
                f"*–ö–æ–º–∞–Ω–¥–∞:* _{team_name}_"
            )
            if from_username:
                text += f"\n*–ö—Ç–æ —É–ø–æ–º—è–Ω—É–ª:* @{from_username}"
            if link:
                text += f"\n\n[–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ]({link})"
            return text
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            text = f"üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ*\n\n{message}"
            if link:
                text += f"\n\n[–û—Ç–∫—Ä—ã—Ç—å]({link})"
            return text
    
    async def send_notification(self, telegram_id: str, message: str, link: Optional[str] = None, notif_type: Optional[str] = None, from_username: Optional[str] = None, team_name: Optional[str] = None, task_text: Optional[str] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π"""
        if not self.bot:
            self.logger.error("üî¥ –ë–û–¢: –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        try:
            if telegram_id.startswith('@'):
                self.logger.warning(f"‚ö†Ô∏è –û–¢–ü–†–ê–í–ö–ê: –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ username: {telegram_id}")
                return False
            try:
                chat_id = int(telegram_id)
            except ValueError:
                self.logger.error(f"üî¥ –û–¢–ü–†–ê–í–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID: {telegram_id}")
                return False
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            full_message = self.format_notification(notif_type, message, link, from_username, team_name, task_text)
            # –ö–Ω–æ–ø–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞
            reply_markup = None
            if link:
                if link.startswith('/'):
                    base_url = os.environ.get('BASE_URL', 'http://localhost:5000')
                    link = f"{base_url}{link}"
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É", url=link)]
                ])
            await self.bot.send_message(
                chat_id=chat_id,
                text=full_message,
                parse_mode='Markdown',
                disable_web_page_preview=True,
                reply_markup=reply_markup
            )
            self.logger.info(f"üì® –û–¢–ü–†–ê–í–ö–ê: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
            return True
        except Exception as e:
            self.logger.error(f"üî¥ –û–®–ò–ë–ö–ê: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")
            return False
    
    async def process_notifications_queue(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.logger.info("üîÑ –û–ß–ï–†–ï–î–¨: –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        while self.running:
            try:
                conn = self.get_db_connection()
                if not conn:
                    await asyncio.sleep(10)
                    continue
                cur = conn.cursor()
                # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                cur.execute("""
                    SELECT n.id, n.type, n.message, n.link, u.telegram_id, u.telegram_username, u.username, n.team_id, n.task_id
                    FROM notifications n
                    JOIN users u ON n.user_id = u.id
                    WHERE u.telegram_id IS NOT NULL 
                    AND u.telegram_id != ''
                    AND NOT EXISTS (
                        SELECT 1 FROM telegram_notifications tn 
                        WHERE tn.notification_id = n.id
                    )
                    ORDER BY n.created_at ASC
                    LIMIT 10
                """)
                notifications = cur.fetchall()
                if notifications:
                    self.logger.info(f"üìã –û–ß–ï–†–ï–î–¨: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                for notification in notifications:
                    notif_id, notif_type, message, link, telegram_id, telegram_username, to_username, team_id, task_id = notification
                    # –ü–æ–ª—É—á–∞–µ–º from_username, team_name, task_text –¥–ª—è —à–∞–±–ª–æ–Ω–∞
                    from_username = None
                    team_name = None
                    task_text = None
                    # from_user_id
                    cur.execute('SELECT from_user_id FROM notifications WHERE id=%s', (notif_id,))
                    row = cur.fetchone()
                    from_user_id = row[0] if row else None
                    if from_user_id:
                        cur.execute('SELECT username FROM users WHERE id=%s', (from_user_id,))
                        row = cur.fetchone()
                        if row:
                            from_username = row[0]
                    if team_id:
                        cur.execute('SELECT name FROM teams WHERE id=%s', (team_id,))
                        row = cur.fetchone()
                        if row:
                            team_name = row[0]
                    if task_id:
                        cur.execute('SELECT text FROM team_tasks WHERE id=%s', (task_id,))
                        row = cur.fetchone()
                        if row:
                            task_text = row[0]
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    success = await self.send_notification(telegram_id, message, link, notif_type, from_username, team_name, task_text)
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü—É telegram_notifications
                    cur.execute("""
                        INSERT INTO telegram_notifications (notification_id, telegram_id, sent_at, success)
                        VALUES (%s, %s, NOW(), %s)
                        ON CONFLICT (notification_id) DO NOTHING
                    """, (notif_id, telegram_id, success))
                conn.commit()
                cur.close()
                conn.close()
            except Exception as e:
                self.logger.error(f"üî¥ –û–®–ò–ë–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                if 'conn' in locals() and conn:
                    try:
                        conn.close()
                    except Exception:
                        pass
            await asyncio.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    
    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        bot_token = self.get_bot_token()
        
        if not bot_token:
            self.logger.error("üî¥ –¢–û–ö–ï–ù: TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
            self.logger.info("üîç –ü–†–û–í–ï–†–ö–ê: –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
            for key, value in os.environ.items():
                if 'TELEGRAM' in key.upper():
                    self.logger.info(f"  {key}={value[:10]}..." if len(value) > 10 else f"  {key}={value}")
            return False
        
        self.logger.info(f"üîë –¢–û–ö–ï–ù: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω: {bot_token[:10]}...{bot_token[-4:]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        database_url = self.get_database_url()
        self.logger.info(f"üóÑÔ∏è –ë–î: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {database_url[:50]}...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = Application.builder().token(bot_token).build()
            self.bot = self.application.bot
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
            bot_info = await self.bot.get_me()
            self.logger.info(f"ü§ñ –ë–û–¢: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω @{bot_info.username} ({bot_info.first_name})")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("myid", self.myid_command))
            
            self.running = True
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await self.create_telegram_notifications_table()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            self.logger.info("üöÄ –ó–ê–ü–£–°–ö: –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            await self.application.initialize()
            await self.application.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(self.process_notifications_queue())
            
            # –ù–∞—á–∏–Ω–∞–µ–º polling
            await self.application.updater.start_polling()
            
            self.logger.info("‚úÖ –ì–û–¢–û–í: Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await self.wait_for_shutdown()
            
            return True
            
        except Exception as e:
            self.logger.error(f"üî¥ –û–®–ò–ë–ö–ê: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞: {e}")
            return False
    
    async def create_telegram_notifications_table(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            conn = self.get_db_connection()
            if not conn:
                self.logger.warning("‚ö†Ô∏è –ë–î: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã")
                return
            
            cur = conn.cursor()
            cur.execute("""
                CREATE TABLE IF NOT EXISTS telegram_notifications (
                    id SERIAL PRIMARY KEY,
                    notification_id INTEGER NOT NULL REFERENCES notifications(id) ON DELETE CASCADE,
                    telegram_id TEXT NOT NULL,
                    sent_at TIMESTAMP NOT NULL DEFAULT NOW(),
                    success BOOLEAN NOT NULL DEFAULT FALSE,
                    UNIQUE(notification_id)
                )
            """)
            conn.commit()
            cur.close()
            conn.close()
            self.logger.info("‚úÖ –ë–î: –¢–∞–±–ª–∏—Ü–∞ telegram_notifications –≥–æ—Ç–æ–≤–∞")
        except Exception as e:
            self.logger.error(f"üî¥ –û–®–ò–ë–ö–ê: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã telegram_notifications: {e}")
    
    async def wait_for_shutdown(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        shutdown_event = asyncio.Event()
        
        def signal_handler():
            self.logger.info("‚èπÔ∏è –°–ò–ì–ù–ê–õ: –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            shutdown_event.set()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        for sig in (signal.SIGTERM, signal.SIGINT):
            signal.signal(sig, lambda s, f: signal_handler())
        
        await shutdown_event.wait()
        await self.stop_bot()
    
    async def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.logger.info("üõë –û–°–¢–ê–ù–û–í–ö–ê: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
        self.running = False
        
        if self.application:
            try:
                await self.application.updater.stop()
                await self.application.stop()
                await self.application.shutdown()
                self.logger.info("‚úÖ –û–°–¢–ê–ù–û–í–õ–ï–ù: Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                self.logger.error(f"üî¥ –û–®–ò–ë–ö–ê: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞: {e}")

    def send_deadline_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö (—Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–Ω—ã–µ –∑–∞–¥–∞—á–∏)"""
        self.logger.info("üìÖ –î–ï–î–õ–ê–ô–ù–´: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö (–ë–î)")
        try:
            conn = self.get_db_connection()
            if not conn:
                self.logger.error("üî¥ –ë–î: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î –¥–ª—è –¥–µ–¥–ª–∞–π–Ω–æ–≤")
                return
            cur = conn.cursor()
            cur.execute("""
                SELECT tt.id, tt.text, tt.due_date, tt.assignee_id, t.name as team_name, u.username as assignee_username, u.telegram_id
                FROM team_tasks tt
                JOIN users u ON tt.assignee_id = u.id
                JOIN teams t ON tt.team_id = t.id
                WHERE tt.due_date IS NOT NULL
                  AND tt.due_date >= CURRENT_DATE
                  AND tt.due_date <= CURRENT_DATE + INTERVAL '3 days'
                  AND tt.status NOT IN ('completed', 'done', 'finished')
                  AND u.telegram_id IS NOT NULL
            """)
            tasks = cur.fetchall()
            today = datetime.now().date()
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                for task in tasks:
                    due_date = task[2]
                    if isinstance(due_date, str):
                        due_date = datetime.strptime(due_date, '%Y-%m-%d').date()
                    days_until = (due_date - today).days
                    if days_until == 1:
                        emoji = "üö®"
                        urgency = "*–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –î–ï–î–õ–ê–ô–ù!* –ó–∞–≤—Ç—Ä–∞"
                    elif days_until == 2:
                        emoji = "‚ö†Ô∏è"
                        urgency = "*–°–†–û–ß–ù–´–ô –î–ï–î–õ–ê–ô–ù!* –ß–µ—Ä–µ–∑ 2 –¥–Ω—è"
                    else:
                        emoji = "üìÖ"
                        urgency = "*–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ* –ß–µ—Ä–µ–∑ 3 –¥–Ω—è"
                    message = (
                        f"{emoji} {urgency}\n\n"
                        f"*–ó–∞–¥–∞—á–∞:* _{task[1]}_\n"
                        f"*–î–µ–¥–ª–∞–π–Ω:* {task[2]}\n"
                        f"*–ö–æ–º–∞–Ω–¥–∞:* {task[4]}\n\n"
                        f"üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É –≤–æ–≤—Ä–µ–º—è!"
                    )
                    try:
                        loop.run_until_complete(self.bot.send_message(
                            chat_id=task[6],
                            text=message,
                            parse_mode='Markdown',
                            disable_web_page_preview=True
                        ))
                        self.logger.info(f"üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–¥–∞—á–∏ {task[0]}")
                    except Exception as e:
                        self.logger.error(f"üî¥ –û–®–ò–ë–ö–ê: –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            finally:
                loop.close()
            cur.close()
            conn.close()
        except Exception as e:
            self.logger.error(f"üî¥ –û–®–ò–ë–ö–ê: –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö (–ë–î): {e}")

    def send_stuck_tasks_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á–∞—Ö (—Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–Ω—ã–µ –∑–∞–¥–∞—á–∏)"""
        self.logger.info("üïê –ó–ê–í–ò–°–®–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á (–ë–î)")
        try:
            conn = self.get_db_connection()
            if not conn:
                self.logger.error("üî¥ –ë–î: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î –¥–ª—è –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á")
                return
            cur = conn.cursor()
            cur.execute("""
                SELECT tt.id, tt.text, tt.updated_at, tt.assignee_id, t.name as team_name, u.username as assignee_username, u.telegram_id
                FROM team_tasks tt
                JOIN users u ON tt.assignee_id = u.id
                JOIN teams t ON tt.team_id = t.id
                WHERE tt.updated_at < (CURRENT_DATE - INTERVAL '3 days')
                  AND tt.status NOT IN ('completed', 'done', 'finished')
                  AND u.telegram_id IS NOT NULL
            """)
            tasks = cur.fetchall()
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                for task in tasks:
                    updated_at = task[2]
                    if isinstance(updated_at, str):
                        updated_at = datetime.strptime(updated_at, '%Y-%m-%d %H:%M:%S')
                    days_stuck = (datetime.now() - updated_at).days
                    message = (
                        f"üö® *–ó–∞–≤–∏—Å—à–∞—è –∑–∞–¥–∞—á–∞!*\n\n"
                        f"üìã *–ó–∞–¥–∞—á–∞:* _{task[1]}_\n"
                        f"üë§ *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {task[5]}\n"
                        f"üè¢ *–ö–æ–º–∞–Ω–¥–∞:* {task[4]}\n"
                        f"‚è∞ *–ù–µ –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å:* {days_stuck} –¥–Ω–µ–π\n"
                        f"üìÖ *–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:* {updated_at.strftime('%Y-%m-%d')}\n\n"
                        f"üí° *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π*"
                    )
                    try:
                        loop.run_until_complete(self.bot.send_message(
                            chat_id=task[6],
                            text=message,
                            parse_mode='Markdown',
                            disable_web_page_preview=True
                        ))
                        self.logger.info(f"üïê –ó–∞–≤–∏—Å—à–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è {task[0]}")
                    except Exception as e:
                        self.logger.error(f"üî¥ –û–®–ò–ë–ö–ê: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–∏—Å—à–µ–π –∑–∞–¥–∞—á–∏: {e}")
            finally:
                loop.close()
            cur.close()
            conn.close()
        except Exception as e:
            self.logger.error(f"üî¥ –û–®–ò–ë–ö–ê: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á–∞—Ö (–ë–î): {e}")

    def send_weekly_reports(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –∫–æ–º–∞–Ω–¥ (—Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–Ω—ã–µ –∑–∞–¥–∞—á–∏)"""
        self.logger.info("üìä –û–¢–ß–Å–¢–´: –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ (–ë–î)")
        try:
            conn = self.get_db_connection()
            if not conn:
                self.logger.error("üî¥ –ë–î: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤")
                return
            cur = conn.cursor()
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Å –∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏ –∏ telegram_id
            cur.execute("""
                SELECT t.id, t.name, u.username as leader_name, u.telegram_id
                FROM teams t
                JOIN users u ON t.leader_id = u.id
                WHERE u.telegram_id IS NOT NULL
            """)
            teams = cur.fetchall()
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                for team in teams:
                    team_id, team_name, team_leader, telegram_id = team
                    week_ago = (datetime.now() - timedelta(days=7))
                    # –í—Å–µ–≥–æ –∑–∞–¥–∞—á
                    cur.execute("SELECT COUNT(*) FROM team_tasks WHERE team_id = %s", (team_id,))
                    total_tasks = cur.fetchone()[0]
                    # –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ –Ω–µ–¥–µ–ª—é
                    cur.execute("""
                        SELECT COUNT(*) FROM team_tasks 
                        WHERE team_id = %s AND status IN ('completed', 'done', 'finished')
                        AND updated_at >= %s
                    """, (team_id, week_ago))
                    completed_this_week = cur.fetchone()[0]
                    # –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é
                    cur.execute("""
                        SELECT COUNT(*) FROM team_tasks 
                        WHERE team_id = %s AND updated_at >= %s
                    """, (team_id, week_ago))
                    new_this_week = cur.fetchone()[0]
                    # –ó–∞–≤–∏—Å—à–∏—Ö
                    cur.execute("""
                        SELECT COUNT(*) FROM team_tasks 
                        WHERE team_id = %s AND updated_at < (CURRENT_DATE - INTERVAL '3 days')
                        AND status NOT IN ('completed', 'done', 'finished')
                    """, (team_id,))
                    stuck_tasks = cur.fetchone()[0]
                    # –î–µ–¥–ª–∞–π–Ω—ã –Ω–∞ –Ω–µ–¥–µ–ª–µ
                    cur.execute("""
                        SELECT COUNT(*) FROM team_tasks 
                        WHERE team_id = %s AND due_date BETWEEN CURRENT_DATE AND (CURRENT_DATE + INTERVAL '7 days')
                        AND status NOT IN ('completed', 'done', 'finished')
                    """, (team_id,))
                    due_this_week = cur.fetchone()[0]
                    # –¢–æ–ø-3 –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞
                    cur.execute("""
                        SELECT u.username, COUNT(tt.id) as task_count
                        FROM users u
                        LEFT JOIN team_tasks tt ON u.id = tt.assignee_id AND tt.team_id = %s
                        WHERE u.id IN (SELECT user_id FROM team_members WHERE team_id = %s)
                        GROUP BY u.username
                        ORDER BY task_count DESC
                        LIMIT 3
                    """, (team_id, team_id))
                    top_members = cur.fetchall()
                    completion_rate = round((completed_this_week / max(total_tasks, 1)) * 100, 1)
                    completion_emoji = "üü¢" if completion_rate >= 80 else "üü°" if completion_rate >= 50 else "üî¥"
                    message = f"""üìä *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –∫–æ–º–∞–Ω–¥—ã*

üè¢ *–ö–æ–º–∞–Ω–¥–∞:* {team_name}
üëë *–í–ª–∞–¥–µ–ª–µ—Ü:* {team_leader}
üìÖ *–ü–µ—Ä–∏–æ–¥:* {week_ago.strftime('%Y-%m-%d')} - {datetime.now().strftime('%Y-%m-%d')}

üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}
‚Ä¢ ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ –Ω–µ–¥–µ–ª—é: {completed_this_week}
‚Ä¢ üÜï –ù–æ–≤—ã—Ö –∑–∞–¥–∞—á: {new_this_week}
‚Ä¢ üö® –ó–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á: {stuck_tasks}
‚Ä¢ ‚è∞ –î–µ–¥–ª–∞–π–Ω–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é: {due_this_week}
‚Ä¢ {completion_emoji} –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {completion_rate}%

üèÜ *–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–∏:*\n"""
                    for i, member in enumerate(top_members, 1):
                        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â"
                        message += f"{medal} {member[0]}: {member[1]} –∑–∞–¥–∞—á\n"
                    if stuck_tasks > 0:
                        message += f"\n‚ö†Ô∏è *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ {stuck_tasks} –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á"
                    if completion_rate < 50:
                        message += f"\n‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ —Ç–µ–º–ø –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á"
                    try:
                        loop.run_until_complete(self.bot.send_message(
                            chat_id=telegram_id,
                            text=message,
                            parse_mode='Markdown',
                            disable_web_page_preview=True
                        ))
                        self.logger.info(f"üìä –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {team_name}")
                    except Exception as e:
                        self.logger.error(f"üî¥ –û–®–ò–ë–ö–ê: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞: {e}")
            finally:
                loop.close()
            cur.close()
            conn.close()
        except Exception as e:
            self.logger.error(f"üî¥ –û–®–ò–ë–ö–ê: –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ (–ë–î): {e}")

    def schedule_notifications(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        # –î–µ–¥–ª–∞–π–Ω—ã –∏ –∑–∞–≤–∏—Å—à–∏–µ –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
        schedule.every().day.at("09:00").do(self.send_deadline_reminders)
        schedule.every().day.at("09:00").do(self.send_stuck_tasks_notification)
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –≤ 9:00
        schedule.every().monday.at("09:00").do(self.send_weekly_reports)
        self.logger.info("üìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï: –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
        self.logger.info("   üïò –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00")
        self.logger.info("   üïò –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á–∞—Ö: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00")
        self.logger.info("   üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã: —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –≤ 9:00")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_schedule():
            while True:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        scheduler_thread = threading.Thread(target=run_schedule, daemon=True)
        scheduler_thread.start()
        self.logger.info("‚úÖ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö: –ó–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    bot_token = os.environ.get('TELEGRAM_BOT_TOKEN', '').strip()
    if not bot_token:
        logger.error("üî¥ –¢–û–ö–ï–ù: TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        logger.info("üîç –ü–†–û–í–ï–†–ö–ê: –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
        logger.info("  1. –§–∞–π–ª .env —Å–æ–¥–µ—Ä–∂–∏—Ç TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")
        logger.info("  2. –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: export TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")
        sys.exit(1)
    
    logger.info(f"üîë –¢–û–ö–ï–ù: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω: {bot_token[:10]}...{bot_token[-4:]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    database_url = os.environ.get('DATABASE_URL', 'postgres://kanban_user:kanban_pass@localhost:5432/kanban_db')
    logger.info(f"üóÑÔ∏è –ë–î: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {database_url[:50]}...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = TelegramBot()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        bot.schedule_notifications()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await bot.start_bot()
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–†–ï–†–´–í–ê–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞: {e}")
        sys.exit(1)
    finally:
        await bot.stop_bot()

if __name__ == "__main__":
    asyncio.run(main()) 